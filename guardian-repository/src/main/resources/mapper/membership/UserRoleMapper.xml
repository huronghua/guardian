<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.banmatrip.guardian.repository.mapper.membership.UserRoleMapper">
    <resultMap id="BaseResultMap" type="com.banmatrip.guardian.domain.UserRole">
        <id column="user_id" property="userId" jdbcType="INTEGER"/>
        <id column="role_id" property="roleId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="create_id" property="createId" jdbcType="INTEGER"/>
        <result column="update_id" property="updateId" jdbcType="INTEGER"/>
        <result column="delete_flag" property="deleteFlag" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    user_id, role_id, create_time, update_time, create_id, update_id,delete_flag
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.banmatrip.guardian.domain.UserRoleKey">
        select
        <include refid="Base_Column_List"/>
        from sso_user_role
        where user_id = #{userId,jdbcType=INTEGER}
        and role_id = #{roleId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="com.banmatrip.guardian.domain.UserRoleKey">
    delete from sso_user_role
    where user_id = #{userId,jdbcType=INTEGER}
      and role_id = #{roleId,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.banmatrip.guardian.domain.UserRole">
    insert into sso_user_role (user_id, role_id, create_time, 
      update_time, create_id, update_id,delete_flag)
    values (#{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{createId,jdbcType=INTEGER}, #{updateId,jdbcType=INTEGER}, 
      #{rolesId,jdbcType=BIGINT},#{delete_flag,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.banmatrip.guardian.domain.UserRole">
        insert into sso_user_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="createId != null">
                create_id,
            </if>
            <if test="updateId != null">
                update_id,
            </if>
            <if test="deleteFlag != null">
                delete_flag,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createId != null">
                #{createId,jdbcType=INTEGER},
            </if>
            <if test="updateId != null">
                #{updateId,jdbcType=INTEGER},
            </if>
            <if test="rolesId != null">
                #{rolesId,jdbcType=BIGINT},
            </if>
            <if test="deleteFlag != null">
                #{deleteFlag,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.banmatrip.guardian.domain.UserRole">
        update sso_user_role
        <set>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createId != null">
                create_id = #{createId,jdbcType=INTEGER},
            </if>
            <if test="updateId != null">
                update_id = #{updateId,jdbcType=INTEGER},
            </if>
            <if test="deleteFlag != null">
                delete_flag = #{deleteFlag,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER}
        and role_id = #{roleId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.banmatrip.guardian.domain.UserRole">
    update sso_user_role
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_id = #{createId,jdbcType=INTEGER},
      update_id = #{updateId,jdbcType=INTEGER},
      delete_flag = #{delete_flag,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
      and role_id = #{roleId,jdbcType=INTEGER}
  </update>

    <!--更新删除标志以删除角色成员-->
    <update id="deleteRoleMemberByUpdateDeleteFlag" parameterType="com.banmatrip.guardian.domain.UserRole">
    UPDATE sso_user_role
    SET delete_flag = 'Y'
    WHERE
    user_id = #{userId}
    AND role_id = #{roleId}
  </update>
    <!--添加角色成员-->
    <insert id="addRoleMember" parameterType="com.banmatrip.guardian.domain.UserRole">
    INSERT INTO sso_user_role (user_id, role_id)
    VALUES
	(#{userId},#{roleId}) ON DUPLICATE KEY UPDATE delete_flag = 'N'
  </insert>

    <!--查询角色-->
    <select id="selectRoleByUserId" parameterType="java.lang.Integer" resultType="com.banmatrip.guardian.domain.Role">
     SELECT
	  b.id AS id,
	  b.`name` AS name,
	  b.group_id AS groupId,
	  b.create_time AS createTime,
	  b.update_time AS updateTime,
	  b.create_id AS createId,
	  b.update_id AS updateId,
	  b.destination_type AS destinationType,
	  b.product_type AS productType,
	  b.platform_type AS platformType,
	  b.resource_type AS  resourceType
    FROM
	   sso_user_role a
    JOIN sso_role b
    ON a.role_id = b.id
    WHERE
	a.user_id = #{userId} and a.delete_flag='N'
  </select>

    <!--下载角色成员信息-->
    <select id="downloadRoleMemberInfo" resultType="java.util.Map">
        SELECT
        GROUP_CONCAT(f.roleName) AS roleName,
        f.memberName,
        f.departmentName,
        f.position,
        f.email,
        f.employeeId,
        f.cellphone
        FROM
        (
        SELECT
        b.`name` AS roleName,
        c.`name` AS memberName,
        e.department_name AS departmentName,
        d.`name` AS position,
        c.email,
        c.employee_id AS employeeId,
        c.cellphone
        FROM
        (
        SELECT
        *
        FROM
        `sso_user_role`
        WHERE
        delete_flag = 'N'
        ) a
        LEFT JOIN sso_role b ON b.id = a.role_id
        JOIN (
        SELECT
        *
        FROM
        sso_user
        WHERE
        disable_status = 0
        ) c ON c.id = a.user_id
        LEFT JOIN (
        SELECT
        *
        FROM
        sso_dictionary
        WHERE
        type = 1
        ) d ON d.`code` = c.position_id
        LEFT JOIN (
        SELECT
        a.id AS user_id,
        GROUP_CONCAT(c.`name`) AS department_name
        FROM
        sso_user a
        LEFT JOIN sso_department_group b ON a.department_id = b.id
        LEFT JOIN sso_department c ON b.department_id = c.id
        GROUP BY
        a.id
        ) e ON e.user_id = c.id
        ) f
        GROUP BY
        f.memberName
    </select>
</mapper>